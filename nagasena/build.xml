<!DOCTYPE project [
  <!ENTITY system.xml SYSTEM "./system.xml" >
  <!ENTITY properties.xml SYSTEM "./properties.xml" >
]>

<project name="Nagasena" default="test" basedir=".">

<property name="debug" value="off"/>

<property name="name" value="Nagasena"/>
<property name="version" value="0000.0002.0069.0"/>
<property name="vendor" value="OpenEXI"/>

&system.xml;
&properties.xml;

<property name="src.dir" value="./src"/>
<property name="test.dir" value="./test"/>
<property name="fixture.dir" value="./fixture"/>
<property name="testdata.dir" value="./testdata"/>

<property name="build.dir" value="./build"/>
<property name="build.docsrc" value="${build.dir}/docsrc"/>
<property name="build.srcjarsrc" value="${build.dir}/srcjarsrc"/>
<property name="build.testdata.dir" value="${build.dir}/testdata"/>

<property name="build.ttf.dir" value="${build.dir}/ttf"/>
<property name="build.util.dir" value="${build.dir}/util"/>
<property name="build.schema.dir" value="${build.dir}/schema"/>
<property name="build.common.dir" value="${build.dir}/common"/>
<property name="build.putil.dir" value="${build.dir}/putil"/>
<property name="build.events.dir" value="${build.dir}/events"/>
<property name="build.grammars.dir" value="${build.dir}/grammars"/>
<property name="build.io.dir" value="${build.dir}/io"/>
<property name="build.compression.dir" value="${build.dir}/compression"/>
<property name="build.proc.dir" value="${build.dir}/proc"/>
<property name="build.sax.dir" value="${build.dir}/sax"/>
<property name="build.scomp.dir" value="${build.dir}/scomp"/>
<property name="build.json.dir" value="${build.dir}/json"/>
<property name="build.cli.dir" value="${build.dir}/cli"/>
<property name="build.ant.dir" value="${build.dir}/ant"/>

<property name="build.ttf.fixture" value="${build.ttf.dir}/fixture"/>

<property name="build.util.src" value="${build.util.dir}/src"/>
<property name="build.util.dest" value="${build.util.dir}/dest"/>

<property name="build.schema.src" value="${build.schema.dir}/src"/>
<property name="build.schema.test" value="${build.schema.dir}/test"/>
<property name="build.schema.fixture" value="${build.schema.dir}/fixture"/>
<property name="build.schema.dest" value="${build.schema.dir}/dest"/>

<property name="build.common.src" value="${build.common.dir}/src"/>
<property name="build.common.test" value="${build.common.dir}/test"/>
<property name="build.common.fixture" value="${build.common.dir}/fixture"/>
<property name="build.common.dest" value="${build.common.dir}/dest"/>

<property name="build.putil.src" value="${build.putil.dir}/src"/>
<property name="build.putil.dest" value="${build.putil.dir}/dest"/>

<property name="build.events.src" value="${build.events.dir}/src"/>
<property name="build.events.dest" value="${build.events.dir}/dest"/>

<property name="build.grammars.src" value="${build.grammars.dir}/src"/>
<property name="build.grammars.test" value="${build.grammars.dir}/test"/>
<property name="build.grammars.fixture" value="${build.grammars.dir}/fixture"/>
<property name="build.grammars.dest" value="${build.grammars.dir}/dest"/>

<property name="build.io.src" value="${build.io.dir}/src"/>
<property name="build.io.test" value="${build.io.dir}/test"/>
<property name="build.io.dest" value="${build.io.dir}/dest"/>

<property name="build.compression.src" value="${build.compression.dir}/src"/>
<property name="build.compression.dest" value="${build.compression.dir}/dest"/>

<property name="build.proc.src" value="${build.proc.dir}/src"/>
<property name="build.proc.test" value="${build.proc.dir}/test"/>
<property name="build.proc.fixture" value="${build.proc.dir}/fixture"/>
<property name="build.proc.dest" value="${build.proc.dir}/dest"/>

<property name="build.sax.src" value="${build.sax.dir}/src"/>
<property name="build.sax.test" value="${build.sax.dir}/test"/>
<property name="build.sax.dest" value="${build.sax.dir}/dest"/>

<property name="build.scomp.src" value="${build.scomp.dir}/src"/>
<property name="build.scomp.test" value="${build.scomp.dir}/test"/>
<property name="build.scomp.fixture" value="${build.scomp.dir}/fixture"/>
<property name="build.scomp.dest" value="${build.scomp.dir}/dest"/>

<property name="build.json.src" value="${build.json.dir}/src"/>
<property name="build.json.test" value="${build.json.dir}/test"/>
<property name="build.json.dest" value="${build.json.dir}/dest"/>

<property name="build.cli.src" value="${build.cli.dir}/src"/>
<property name="build.cli.dest" value="${build.cli.dir}/dest"/>

<property name="build.ant.src" value="${build.ant.dir}/src"/>
<property name="build.ant.dest" value="${build.ant.dir}/dest"/>

<path id="regexi.class.path">
  <pathelement location="${regexi.classes}"/>
</path>

<path id="xerces.class.path">
  <pathelement location="${xercesImpl.jar}"/>
</path>

<path id="xml-apis.class.path">
  <pathelement location="${xml-apis.jar}"/>
</path>

<path id="jackson.class.path">
  <pathelement location="${jackson-core.jar}"/>
</path>

<path id="javadoc.class.path">
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${xercesImpl.jar}"/>
</path>

<!-- =================================================================== -->
<!-- Source Compilation Classpathes                                      -->
<!-- =================================================================== -->

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="schema.src.compile.class.path">
  <pathelement location="${build.util.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="common.src.compile.class.path">
  <pathelement location="${build.schema.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="events.src.compile.class.path">
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="grammars.src.compile.class.path">
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.events.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="io.src.compile.class.path">
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.events.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="compression.src.compile.class.path">
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.events.dest}"/>
  <pathelement location="${build.io.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="proc.src.compile.class.path">
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.events.dest}"/>
  <pathelement location="${build.io.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="sax.src.compile.class.path">
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.events.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.proc.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="scomp.src.compile.class.path">
  <path refid="xerces.class.path"/>
  <path refid="regexi.class.path"/>
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.sax.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="json.src.compile.class.path">
  <path refid="jackson.class.path"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.sax.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="cli.src.compile.class.path">
  <pathelement location="${commons-cli-1.2.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.sax.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
</path>

<!-- DO NOT CHANGE! The path is composed to enforce dependency. -->
<path id="ant.src.compile.class.path">
  <pathelement location="${ant.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.sax.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
</path>

<!-- =================================================================== -->
<!-- Fixture Compilation Classpathes                                     -->
<!-- =================================================================== -->

<path id="ttf.fixture.compile.class.path">
  <pathelement location="${junit.jar}"/>
</path>

<path id="schema.fixture.compile.class.path">
  <path refid="xerces.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
</path>

<path id="common.fixture.compile.class.path">
  <pathelement location="${build.common.dest}"/>
</path>

<path id="grammars.fixture.compile.class.path">
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
</path>

<path id="proc.fixture.compile.class.path">
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.events.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.proc.dest}"/>
</path>

<path id="scomp.fixture.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.sax.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
</path>

<!-- =================================================================== -->
<!-- Test Compilation Classpathes                                        -->
<!-- =================================================================== -->

<path id="schema.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.schema.fixture}"/>
</path>

<path id="common.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.common.dest}"/>
</path>

<path id="grammars.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<path id="io.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <!-- io test (but not src and fixture) can use grammars and scomp. -->
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<path id="scomp.test.compile.class.path">
  <path refid="xerces.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.sax.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<path id="proc.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.events.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.compression.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.proc.fixture}"/>
  <pathelement location="${build.scomp.dest}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<path id="sax.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.ttf.fixture}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.common.fixture}"/>
  <pathelement location="${build.putil.dest}"/>
  <pathelement location="${build.events.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.grammars.fixture}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.compression.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.sax.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<path id="json.test.compile.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.json.dest}"/>
</path>

<!-- =================================================================== -->
<!-- Schema Compilation Classpathes                                      -->
<!-- =================================================================== -->

<path id="scomp.fixture.run.class.path">
  <path refid="xerces.class.path"/>
  <path refid="xml-apis.class.path"/>
  <path refid="regexi.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.util.dest}"/>
  <pathelement location="${build.schema.dest}"/>
  <pathelement location="${build.common.dest}"/>
  <pathelement location="${build.grammars.dest}"/>
  <pathelement location="${build.io.dest}"/>
  <pathelement location="${build.proc.dest}"/>
  <pathelement location="${build.sax.dest}"/>
  <pathelement location="${build.scomp.dest}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<!-- =================================================================== -->
<!-- Test Run Classpathes                                                -->
<!-- =================================================================== -->

<path id="schema.test.run.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.schema.test}"/>
</path>

<path id="common.test.run.class.path">
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.common.test}"/>
</path>

<path id="grammars.test.run.class.path">
  <path refid="xerces.class.path"/>
  <path refid="xml-apis.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.dir}/nagasena-rta.jar"/>
  <pathelement location="${build.testdata.dir}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.grammars.test}"/>
  <pathelement location="${build.scomp.fixture}"/>
</path>

<path id="io.test.run.class.path">
  <path refid="xerces.class.path"/>
  <path refid="xml-apis.class.path"/>
  <path refid="regexi.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.dir}/nagasena-rta.jar"/>
  <pathelement location="${build.testdata.dir}"/>
  <pathelement location="${build.scomp.fixture}"/>
  <pathelement location="${build.io.test}"/>
</path>

<path id="scomp.test.run.class.path">
  <path refid="xerces.class.path"/>
  <path refid="xml-apis.class.path"/>
  <path refid="regexi.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.dir}/nagasena-rta.jar"/>
  <pathelement location="${build.testdata.dir}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.scomp.fixture}"/>
  <pathelement location="${build.scomp.test}"/>
</path>

<path id="proc.test.run.class.path">
  <path refid="xerces.class.path"/>
  <path refid="xml-apis.class.path"/>
  <path refid="regexi.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.dir}/nagasena-rta.jar"/>
  <pathelement location="${build.testdata.dir}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.scomp.fixture}"/>
  <pathelement location="${build.proc.fixture}"/>
  <pathelement location="${build.proc.test}"/>
</path>

<path id="sax.test.run.class.path">
  <path refid="xerces.class.path"/>
  <path refid="xml-apis.class.path"/>
  <path refid="regexi.class.path"/>
  <pathelement location="${junit.jar}"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.dir}/nagasena-rta.jar"/>
  <pathelement location="${build.testdata.dir}"/>
  <pathelement location="${build.ttf.fixture}"/>
  <pathelement location="${build.schema.fixture}"/>
  <pathelement location="${build.common.fixture}"/>
  <pathelement location="${build.grammars.fixture}"/>
  <pathelement location="${build.scomp.fixture}"/>
  <pathelement location="${build.sax.test}"/>
</path>

<path id="json.test.run.class.path">
  <pathelement location="${junit.jar}"/>
  <path refid="jackson.class.path"/>
  <pathelement location="${build.dir}/nagasena.jar"/>
  <pathelement location="${build.testdata.dir}"/>
  <pathelement location="${build.json.test}"/>
</path>

<path id="javadoc.src.path">
  <pathelement location="${build.docsrc}"/>
</path>

<!-- =================================================================== -->
<!-- Cleans everything                                                   -->
<!-- =================================================================== -->
<target name="clean">
  <delete dir="${build.dir}"/>
</target>

<!-- =================================================================== -->
<!-- Prepares the build directory                                        -->
<!-- =================================================================== -->
<target name="prepare">
  <mkdir dir="${build.dir}"/>
</target>

<!-- =================================================================== -->
<!-- directory creation and file copying common to all configurations    -->
<!-- =================================================================== -->
<target name="prepare-common" depends="prepare">
  <!-- create directories -->
  <mkdir dir="${build.ttf.dir}"/>
  <mkdir dir="${build.ttf.fixture}"/>

  <mkdir dir="${build.util.dir}"/>
  <mkdir dir="${build.util.src}"/>
  <mkdir dir="${build.util.dest}"/>

  <mkdir dir="${build.schema.dir}"/>
  <mkdir dir="${build.schema.src}"/>
  <mkdir dir="${build.schema.fixture}"/>
  <mkdir dir="${build.schema.test}"/>
  <mkdir dir="${build.schema.dest}"/>

  <mkdir dir="${build.common.dir}"/>
  <mkdir dir="${build.common.src}"/>
  <mkdir dir="${build.common.fixture}"/>
  <mkdir dir="${build.common.test}"/>
  <mkdir dir="${build.common.dest}"/>

  <mkdir dir="${build.putil.dir}"/>
  <mkdir dir="${build.putil.src}"/>
  <mkdir dir="${build.putil.dest}"/>

  <mkdir dir="${build.events.dir}"/>
  <mkdir dir="${build.events.src}"/>
  <mkdir dir="${build.events.dest}"/>

  <mkdir dir="${build.grammars.dir}"/>
  <mkdir dir="${build.grammars.src}"/>
  <mkdir dir="${build.grammars.test}"/>
  <mkdir dir="${build.grammars.fixture}"/>
  <mkdir dir="${build.grammars.dest}"/>

  <mkdir dir="${build.io.dir}"/>
  <mkdir dir="${build.io.src}"/>
  <mkdir dir="${build.io.test}"/>
  <mkdir dir="${build.io.dest}"/>

  <mkdir dir="${build.compression.dir}"/>
  <mkdir dir="${build.compression.src}"/>
  <mkdir dir="${build.compression.dest}"/>

  <mkdir dir="${build.proc.dir}"/>
  <mkdir dir="${build.proc.src}"/>
  <mkdir dir="${build.proc.fixture}"/>
  <mkdir dir="${build.proc.test}"/>
  <mkdir dir="${build.proc.dest}"/>

  <mkdir dir="${build.sax.dir}"/>
  <mkdir dir="${build.sax.src}"/>
  <mkdir dir="${build.sax.test}"/>
  <mkdir dir="${build.sax.dest}"/>

  <mkdir dir="${build.scomp.dir}"/>
  <mkdir dir="${build.scomp.src}"/>
  <mkdir dir="${build.scomp.fixture}"/>
  <mkdir dir="${build.scomp.test}"/>
  <mkdir dir="${build.scomp.dest}"/>

  <mkdir dir="${build.json.dir}"/>
  <mkdir dir="${build.json.src}"/>
  <mkdir dir="${build.json.test}"/>
  <mkdir dir="${build.json.dest}"/>

  <mkdir dir="${build.cli.dir}"/>
  <mkdir dir="${build.cli.src}"/>
  <mkdir dir="${build.cli.dest}"/>

  <mkdir dir="${build.ant.dir}"/>
  <mkdir dir="${build.ant.src}"/>
  <mkdir dir="${build.ant.dest}"/>

  <mkdir dir="${build.testdata.dir}"/>

  <mkdir dir="${build.docsrc}"/>

  <mkdir dir="${build.srcjarsrc}"/>

</target>

<!-- =================================================================== -->
<!-- Prepares the source code                                            -->
<!-- =================================================================== -->
<target name="prepare-src" depends="prepare-common">

  <!-- copy src files -->
  <copy todir="${build.ttf.fixture}">
    <fileset dir="${fixture.dir}" includes="**/w3c/exi/**/*" />
  </copy>
  <copy todir="${build.util.src}">
    <fileset dir="${src.dir}" includes="**/openexi/util/**/*" />
  </copy>
  <copy todir="${build.schema.src}">
    <fileset dir="${src.dir}" includes="**/openexi/schema/**/*" />
  </copy>
  <copy todir="${build.schema.fixture}">
    <fileset dir="${fixture.dir}" includes="**/openexi/schema/**/*" />
  </copy>
  <copy todir="${build.schema.test}">
    <fileset dir="${test.dir}" includes="**/openexi/schema/**/*" />
  </copy>
  <copy todir="${build.common.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/common/**/*" />
  </copy>
  <copy todir="${build.common.fixture}">
    <fileset dir="${fixture.dir}" includes="**/openexi/proc/common/**/*" />
  </copy>
  <copy todir="${build.common.test}">
    <fileset dir="${test.dir}" includes="**/openexi/proc/common/**/*" />
  </copy>
  <copy todir="${build.putil.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/util/**/*" />
  </copy>
  <copy todir="${build.events.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/events/**/*" />
  </copy>
  <copy todir="${build.grammars.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/grammars/**/*" />
  </copy>
  <copy todir="${build.grammars.fixture}">
    <fileset dir="${fixture.dir}" includes="**/openexi/proc/grammars/**/*" />
  </copy>
  <copy todir="${build.grammars.test}">
    <fileset dir="${test.dir}" includes="**/openexi/proc/grammars/**/*" />
  </copy>
  <copy todir="${build.io.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/io/**/*" 
      excludes="**/openexi/proc/io/compression/**/*" />
  </copy>
  <copy todir="${build.io.test}">
    <fileset dir="${test.dir}" includes="**/openexi/proc/io/**/*" />
  </copy>
  <copy todir="${build.compression.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/io/compression/**/*" />
  </copy>
  <copy todir="${build.proc.src}">
    <fileset dir="${src.dir}" includes="**/openexi/proc/*" />
  </copy>
  <copy todir="${build.proc.fixture}">
    <fileset dir="${fixture.dir}" includes="**/openexi/proc/*" />
  </copy>
  <copy todir="${build.proc.test}">
    <fileset dir="${test.dir}" includes="**/openexi/proc/*" />
  </copy>
  <copy todir="${build.sax.src}">
    <fileset dir="${src.dir}" includes="**/openexi/sax/*" />
  </copy>
  <copy todir="${build.sax.test}">
    <fileset dir="${test.dir}" includes="**/openexi/sax/*" />
  </copy>
  <copy todir="${build.scomp.src}">
    <fileset dir="${src.dir}" includes="**/openexi/scomp/**/*" />
  </copy>
  <copy todir="${build.scomp.fixture}">
    <fileset dir="${fixture.dir}" includes="**/openexi/scomp/**/*" />
  </copy>
  <copy todir="${build.scomp.test}">
    <fileset dir="${test.dir}" includes="**/openexi/scomp/**/*" />
  </copy>
  <copy todir="${build.json.src}">
    <fileset dir="${src.dir}" includes="**/openexi/json/*" />
  </copy>
  <copy todir="${build.json.test}">
    <fileset dir="${test.dir}" includes="**/openexi/json/*" />
  </copy>
  <copy todir="${build.cli.src}">
    <fileset dir="${src.dir}" includes="**/openexi/cli/**/*" />
  </copy>
  <copy todir="${build.ant.src}">
    <fileset dir="${src.dir}" includes="**/openexi/ant/**/*" />
  </copy>

  <copy todir="${build.testdata.dir}">
    <fileset dir="${testdata.dir}" includes="**/*/" />
  </copy>

  <copy todir="${build.srcjarsrc}">
    <fileset dir="${build.util.src}"/>
    <fileset dir="${build.schema.src}"/>
    <fileset dir="${build.common.src}"/>
    <fileset dir="${build.putil.src}"/>
    <fileset dir="${build.events.src}"/>
    <fileset dir="${build.grammars.src}"/>
    <fileset dir="${build.io.src}"/>
    <fileset dir="${build.compression.src}"/>
    <fileset dir="${build.proc.src}"/>
    <fileset dir="${build.sax.src}"/>
    <fileset dir="${build.scomp.src}"/>
    <fileset dir="${build.json.src}"/>
  </copy>

  <copy todir="${build.docsrc}">
    <fileset dir="${build.schema.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/schema/EmptySchema.java"/>
      <include name="org/openexi/schema/EXISchema.java"/>
      <include name="org/openexi/schema/Characters.java"/>
    </fileset>
    <fileset dir="${build.common.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/proc/common/AlignmentType.java"/>
      <include name="org/openexi/proc/common/BinaryDataSource.java"/>
      <include name="org/openexi/proc/common/EventDescription.java"/>
      <include name="org/openexi/proc/common/EXIOptions.java"/>
      <include name="org/openexi/proc/common/GrammarOptions.java"/>
      <include name="org/openexi/proc/common/QName.java"/>
      <include name="org/openexi/proc/common/EventType.java"/>
      <include name="org/openexi/proc/common/SchemaId.java"/>
    </fileset>
    <fileset dir="${build.grammars.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/proc/grammars/GrammarCache.java"/>
    </fileset>
    <fileset dir="${build.io.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/proc/io/BinaryDataSink.java"/>
      <include name="org/openexi/proc/io/CharacterBuffer.java"/>
      <include name="org/openexi/proc/io/Scanner.java"/>
    </fileset>
    <fileset dir="${build.proc.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/proc/EXIDecoder.java"/>
      <include name="org/openexi/proc/EXISchemaResolver.java"/>
      <include name="org/openexi/proc/HeaderOptionsOutputType.java"/>
    </fileset>
    <fileset dir="${build.sax.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/sax/BinaryDataHandler.java"/>
      <include name="org/openexi/sax/EXIReader.java"/>
      <include name="org/openexi/sax/ReaderSupport.java"/>
      <include name="org/openexi/sax/SAXTransmogrifier.java"/>
      <include name="org/openexi/sax/Transmogrifier.java"/>
      <include name="org/openexi/sax/TransmogrifierException.java"/>
    </fileset>
    <fileset dir="${build.scomp.src}">
      <include name="**/*.html"/>
      <include name="org/openexi/scomp/EntityResolverEx.java"/>
      <include name="org/openexi/scomp/EXISchemaFactory.java"/>
      <include name="org/openexi/scomp/EXISchemaFactoryErrorHandler.java"/>
      <include name="org/openexi/scomp/EXISchemaFactoryException.java"/>
      <include name="org/openexi/scomp/EXISchemaReader.java"/>
      <include name="org/openexi/scomp/EXISchemaWriter.java"/>
    </fileset>
    <fileset dir="${build.json.src}">
      <include name="**/*.html"/>
    </fileset>
  </copy>

</target>

<!-- =================================================================== -->
<!-- Compiles the source directory                                       -->
<!-- =================================================================== -->
<target name="compile" description="compilation" depends="prepare-src">

  <!-- Build sources -->
  <javac executable="${jdk1.5}" srcdir="${build.util.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.util.dest}" classpathref="xerces.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.schema.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.schema.dest}" classpathref="schema.src.compile.class.path"/>
  <copy overwrite="true" todir="${build.schema.dest}">
    <fileset dir="${build.schema.src}">
      <include name="**/*.xml"/>
    </fileset>
  </copy>

  <javac executable="${jdk1.5}" srcdir="${build.common.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.common.dest}" classpathref="common.src.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.putil.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.putil.dest}" />

  <javac executable="${jdk1.5}" srcdir="${build.events.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.events.dest}" classpathref="events.src.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.grammars.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.grammars.dest}" classpathref="grammars.src.compile.class.path"/>
  <copy overwrite="true" todir="${build.grammars.dest}">
    <fileset dir="${build.grammars.src}">
      <include name="**/*.xml"/>
    </fileset>
  </copy>

  <javac executable="${jdk1.5}" srcdir="${build.io.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.io.dest}" classpathref="io.src.compile.class.path"/>
  <copy overwrite="true" todir="${build.io.dest}">
    <fileset dir="${build.io.src}">
      <include name="**/*.xml"/>
    </fileset>
  </copy>

  <javac executable="${jdk1.5}" srcdir="${build.compression.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.compression.dest}" classpathref="compression.src.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.proc.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.proc.dest}" classpathref="proc.src.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.sax.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.sax.dest}" classpathref="sax.src.compile.class.path"/>
  <copy overwrite="true" todir="${build.sax.dest}">
    <fileset dir="${build.sax.src}">
      <include name="**/*.xml"/>
    </fileset>
  </copy>

  <javac executable="${jdk1.5}" srcdir="${build.scomp.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.scomp.dest}" classpathref="scomp.src.compile.class.path"/>
  <copy overwrite="true" todir="${build.scomp.dest}">
    <fileset dir="${build.scomp.src}">
      <include name="**/*.xml"/>
      <include name="**/*.xsd"/>
    </fileset>
  </copy>

  <!-- Use JDK 1.6 to compile JSON package. This is necessary in order to use jackson. -->
  <javac executable="${jdk1.6}" srcdir="${build.json.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.json.dest}" classpathref="json.src.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.cli.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.cli.dest}" classpathref="cli.src.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.ant.src}" debug="${debug}" optimize="on"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         destdir="${build.ant.dest}" classpathref="ant.src.compile.class.path"/>

  <!-- Build fixtures -->
  <javac executable="${jdk1.5}" srcdir="${build.ttf.fixture}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="ttf.fixture.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.schema.fixture}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="schema.fixture.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.common.fixture}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="common.fixture.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.grammars.fixture}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="grammars.fixture.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.proc.fixture}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="proc.fixture.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.scomp.fixture}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="scomp.fixture.compile.class.path"/>

  <!-- Compile Header Options schema -->
  <java classname="${CompileSchemasClass}"
        classpathref="scomp.fixture.run.class.path" fork="yes" failonerror="true"/>
  <move todir="${build.schema.dest}/org/openexi/schema">
    <fileset dir="${build.scomp.fixture}/org/openexi/scomp" includes="*.xsc">
      <exclude name="**/*json*"/>
    </fileset>
  </move>
  <move todir="${build.json.dest}/org/openexi/json">
    <fileset dir="${build.scomp.fixture}/org/openexi/scomp" includes="*json.xsc" />
  </move>

  <!-- Encode Grammar Fragments -->
  <java classname="${EncodeGrammarFragments}"
        classpathref="scomp.fixture.run.class.path" fork="yes" failonerror="true"/>
  <move todir="${build.scomp.dest}/org/openexi/scomp">
    <fileset dir="${build.scomp.fixture}/org/openexi/scomp" includes="*.exi" />
  </move>

  <!-- Build tests -->
  <javac executable="${jdk1.5}" srcdir="${build.schema.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="schema.test.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.common.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="common.test.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.grammars.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="grammars.test.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.io.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="io.test.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.proc.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="proc.test.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.sax.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="sax.test.compile.class.path"/>

  <javac executable="${jdk1.5}" srcdir="${build.scomp.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="scomp.test.compile.class.path"/>

  <!-- Use JDK 1.6 to compile JSON package. This is necessary in order to use jackson. -->
  <javac executable="${jdk1.6}" srcdir="${build.json.test}" debug="on" optimize="off"
         fork="true" includeAntRuntime="no" encoding="utf-8"
         classpathref="json.test.compile.class.path"/>

</target>

<!-- =================================================================== -->
<!-- Creates the package                                                 -->
<!-- =================================================================== -->
<target name="jar" description="packaging">
  <tstamp>
    <format property="hourMinute" pattern="HH:mm z"/>
  </tstamp>
  <delete file="${build.dir}/MANIFEST.MF"/>
  <manifest file="${build.dir}/MANIFEST.MF">
    <section name="org/openexi/">
      <attribute name="Software-Name" value="${name}"/>
      <attribute name="Software-Version" value="${version}"/>
      <attribute name="Specification-Title" value="Efficient XML Interchange Format 1.0"/>
      <attribute name="Specification-Vendor" value="World Wide Web Consortium"/>
      <attribute name="Specification-URL" value="http://www.w3.org/TR/2014/REC-exi-20140211/"/>
      <attribute name="Implementation-Title" value="org.openexi"/>
      <attribute name="Implementation-Version" value="${version} ${TODAY} ${hourMinute}"/>
      <attribute name="Implementation-Vendor" value="${vendor}"/>
    </section>
  </manifest>
  <delete file="${build.dir}/nagasena-sources.jar"/>
  <jar destfile="${build.dir}/nagasena-sources.jar" manifest="${build.dir}/MANIFEST.MF">
    <fileset dir="${build.srcjarsrc}">
      <exclude name="**/*.html"/>
      <exclude name="**/*.PNG"/>
    </fileset>
  </jar>
  <delete file="${build.dir}/nagasena.jar"/>
  <jar destfile="${build.dir}/nagasena.jar" manifest="${build.dir}/MANIFEST.MF">
    <!-- xmlResourceBundle -->
    <fileset dir="${build.util.dest}" />
    <!-- exiGrammars -->
    <fileset dir="${build.common.dest}" />
    <fileset dir="${build.putil.dest}" />
    <fileset dir="${build.schema.dest}" />
    <fileset dir="${build.events.dest}" />
    <fileset dir="${build.grammars.dest}" />
    <!-- exiCompression -->
    <fileset dir="${build.compression.dest}" />
    <!-- exiProc -->
    <fileset dir="${build.io.dest}" />
    <fileset dir="${build.proc.dest}" />
    <!-- exiSax -->
    <fileset dir="${build.sax.dest}" />
    <!-- JSON -->
    <fileset dir="${build.json.dest}" />
  </jar>
  <delete file="${build.dir}/nagasena-rta.jar"/>
  <jar destfile="${build.dir}/nagasena-rta.jar" manifest="${build.dir}/MANIFEST.MF">
    <!-- exiScomp -->
    <fileset dir="${build.scomp.dest}" />
    <!-- regexi -->
    <fileset dir="${regexi.classes}" />
  </jar>

  <delete file="${build.dir}/MANIFEST-CLI.MF"/>
  <manifest file="${build.dir}/MANIFEST-CLI.MF">
      <attribute name="Main-Class" value="org.openexi.cli.MainClass"/>
      <attribute name="Class-Path" value="xercesImpl.jar xml-apis.jar commons-cli-1.2.jar 
        nagasena.jar nagasena-rta.jar lib/xercesImpl.jar lib/xml-apis.jar lib/commons-cli-1.2.jar 
        lib/nagasena.jar lib/nagasena-rta.jar ../lib/apache/commons-cli/1.2/commons-cli-1.2.jar"/>
      <attribute name="Software-Name" value="${name}"/>
      <attribute name="Software-Version" value="${version}"/>
      <attribute name="Specification-Title" value="Efficient XML Interchange Format 1.0"/>
      <attribute name="Specification-Vendor" value="World Wide Web Consortium"/>
      <attribute name="Specification-URL" value="http://www.w3.org/TR/2014/REC-exi-20140211/"/>
      <attribute name="Implementation-Title" value="org.openexi"/>
      <attribute name="Implementation-Version" value="${version} ${TODAY} ${hourMinute}"/>
      <attribute name="Implementation-Vendor" value="${vendor}"/>
  </manifest>

  <delete file="${build.dir}/nagasena-cli.jar"/>
  <jar destfile="${build.dir}/nagasena-cli.jar" manifest="${build.dir}/MANIFEST-CLI.MF">
    <fileset dir="${build.cli.dest}" />
  </jar>

  <delete file="${build.dir}/MANIFEST-CLI.MF"/>
  <manifest file="${build.dir}/MANIFEST-CLI.MF">
      <attribute name="Class-Path" value="nagasena.jar ant.jar"/>
      <attribute name="Software-Name" value="${name}"/>
      <attribute name="Software-Version" value="${version}"/>
      <attribute name="Specification-Title" value="Efficient XML Interchange Format 1.0"/>
      <attribute name="Specification-Vendor" value="World Wide Web Consortium"/>
      <attribute name="Specification-URL" value="http://www.w3.org/TR/2014/REC-exi-20140211/"/>
      <attribute name="Implementation-Title" value="org.openexi.ant"/>
      <attribute name="Implementation-Version" value="${version} ${TODAY} ${hourMinute}"/>
      <attribute name="Implementation-Vendor" value="${vendor}"/>
  </manifest>

  <delete file="${build.dir}/ant-nagasena.jar"/>
  <jar destfile="${build.dir}/ant-nagasena.jar" manifest="${build.dir}/MANIFEST-CLI.MF">
    <fileset dir="${build.ant.dest}" />
  </jar>
</target>

<target name="test" description="unit test" depends="compile, jar">

  <junit printsummary="false" haltonfailure="true" fork="yes">
    <formatter type="brief" usefile="false" />
    <classpath refid="schema.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.schema.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes">
    <formatter type="brief" usefile="false" />
    <classpath refid="common.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.common.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes" maxmemory="256M">
    <formatter type="brief" usefile="false" />
    <classpath refid="grammars.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.grammars.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes" maxmemory="256M">
    <formatter type="brief" usefile="false" />
    <classpath refid="io.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.io.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes" maxmemory="256M">
    <formatter type="brief" usefile="false" />
    <classpath refid="scomp.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.scomp.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes" maxmemory="256M">
    <formatter type="brief" usefile="false" />
    <classpath refid="proc.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.proc.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes" maxmemory="512M">
    <formatter type="brief" usefile="false" />
    <classpath refid="sax.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.sax.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

  <junit printsummary="false" haltonfailure="true" fork="yes" maxmemory="512M">
    <formatter type="brief" usefile="false" />
    <classpath refid="json.test.run.class.path"/>
    <batchtest>
      <fileset dir="${build.json.test}" includes="**/*Test.class" />
    </batchtest>
    <assertions><enable/></assertions>
  </junit>

</target>

<target name="doc" description="generate javadoc" depends="prepare-src">

  <mkdir dir="${build.dir}/doc"/>
  <delete dir="${build.dir}/doc"/>
  <mkdir dir="${build.dir}/doc"/>

  <javadoc sourcepathref="javadoc.src.path" destdir="${build.dir}/doc"
     Doctitle="OpenEXI Nagasena" classpathref="javadoc.class.path"
     Locale="en_US" docencoding="ISO-8859-1" charset="ISO-8859-1"
     access="public" breakiterator="yes"
overview="src/org/openexi/overview.html"
>
     <tag name="author"/>
     <doclet name="ydoc.doclets.YStandard"
             path="tools/ydoc/lib/ydoc.jar;tools/ydoc/resources">
       <param name="-filterpath" value="tools/ydoc/lib/ydoc.jar"/>
       <param name="-filter" value="ydoc.filters.ExcludeFilter"/>
     </doclet>
  </javadoc>

</target>

</project>
